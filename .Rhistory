install.packages("devtools")
install.packages("RCurl")
clear
clc
clear screen
help()
x<-1:10
if(x>10) 10
cube <- function(x, n) {
x^3
}
cube(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
rm(x,y,z)
z<-10
f(3)
rm(z)
f(3)
f <- function(x) {
+     g <- function(y) {
+         y + z
+     }
+     x + g(x)
+ }
setwd("~/Courses/R Programming")
x <- 4
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b",TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x + y
x <- c(3,5,1,10,12,6)
x[x<6]<-0
x
data <- read.csv("hw1_data.csv")
View(data)
data$Ozone[47]
is.na(data$Ozone)
sum(is.na(data$O))
mean(data$O, na.rm = TRUE)
mean(data$Solar.R[data$Ozone > 31 & data$Temp > 90], na.rm = TRUE)
mean(data$Temp[data$Month == 6], na.rm = TRUE)
max(data$Ozone[data$Month == 5])
max(data$Ozone[data$Month == 5], na.rm = TRUE)
x <- list(2,"a","b",TRUE)
x[[2]]
a <- x[[2]]
class(a)
setwd("~/Courses/R Programming/ProgrammingAssignment1")
source("rprog_scripts_submitscript1.R")
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate", 70:72)
pollutantmean("specdata","nitrate", 23)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("~/Courses/R Programming/ProgrammingAssignment3")
source("rprog_scripts_submitscript3.R")
submit()
submit()
submit()
source("rankhospital.R")
rankhospital("TX","heart failure", 4)
rankhospital("TX","heart failure", "worst")
rankhospital("MD","heart failure", "worst")
rankhospital("MD","heart attack", "worst")
rankhospital("MN","heart attack", 5000)
rankhospital("MD","heart attack", "worst")
rankhospital("MD","heart attack", "worst")
num
len(perm)
length(perm)
num
perm[45]
hospitals[30]
hospitals[1]
hospitals[29]
hospitals[28]
hospitals[27]
hospitals[perm]
rankhospital("MD","heart attack", "worst")
deathRates
rankhospital("MD","heart attack", "worst")
rankhospital("MD","heart attack", "worst")
rankhospital("MD","heart attack", "worst")
rm(rankhospital)
source("rankhospital.R")
rankhospital("MD","heart attack", "worst")
rankhospital("MD","heart attack", 5000)
submit()
submit()
submit()
submit()
seq(4)
rankedHospitals <- data.frame(hospital = as.character(), state = as.character())
rankedHospitals[1, nrow(rankedHospitals) + 1, ] <- ["<NA>","TX"]
newRow<- ["<NA>","TX"]
newRow <- ("<NA>","TX")
newRow <- c("<NA>","TX")
newRow
state <- "TX"
newRow <- c("<NA", state)
newRow
newRow <- c("<NA>", state)
rankedHospitals[1, nrow(rankedHospitals) + 1, ] <- newRow
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), ] <- newRow
rankedHospitals <- data.frame(hospital = as.character(), state = as.character())
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), ] <- rankedHospitals[seq(0, nrow(rankedHospitals)), ]
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), ] <- newRow
rankedHospitals
newRow
rankedHospitals <- data.frame(hospital = as.character(), state = as.character())
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), 1] <- "<NA>"
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), 2] <- state
rankedHospitals
rankedHospitals <- data.frame(hospital = as.character(), state = as.character())
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), 1] <- "<NA>"
rankedHospitals
str(state)
rankedHospitals <- data.frame(hospital = as.character(), state = as.character(), stringsAsFactors = FALSE)
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), ] <- newRow
rankedHospitals
row.names(1)
row.names(rankedHospitals)
row.names(rankedHospitals)[1]
row.names(rankedHospitals)[1] <- "TX"
row.names(rankedHospitals)
rankedHospitals
row.names(rankedHospitals)[1] <- state
rankedHospitals <- data.frame(hospital = as.character(), state = as.character(), stringsAsFactors = FALSE)
rankedHospitals[seq(1, nrow(rankedHospitals) + 1), ] <- newRow
row.names(rankedHospitals)[1] <- state
rankedHospitals
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
data <- read.csv("outcome-of-care-measures.csv")
states <- data$State
unique(states)
states <- unique(data$State)
states <- unique.array(data$State)
?unique
row.names(states)
states[1]
states[2]
duplicated(data$State)
data$State[!duplicated(data$State)]
states<-data$State[!duplicated(data$State)]
states<-as.character(data$State[!duplicated(data$State)])
states<-as.character(unique(data$State))
head(rankall("heart attack", 20), 10)
rm(rankall)
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
num
head(rankall("heart attack", 20), 10)
newRow
order(as.character(unique(data$State)))
sort(as.character(unique(data$State)))
rm(rankall)
source("rankall.R")
head(rankall("heart attack", 20), 10)
hospitals[perm[num]]
newRow
newRow
hospitals[perm[num]]
hospitals
perm[num]
perm
deathRates
state
stateCol == state
class(state)
class(stateCol)
stateCol
deathRates
outcome
deathRates <- suppressWarnings(as.numeric(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
deathRates[stateCol == state]
hospitals[stateCol == state]
state
hospitals <- data$Hospital.Name[stateCol == state]
hospitals[stateCol == state]
data$Hospital.Name
is.na(data$Hospital.Name)
data$Hospital.Name[stateCol == state]
rm(rankall)
source("rankall.R")
head(rankall("heart attack", 20), 10)
rm(rankall)
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rm(rankall)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
rm(rankall)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
perm
num
rm(rankall)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
submit()
submit()
submit()
rm(all)
rm('all')
?rm
rm
rm()
setwd("~/Courses/R Programming/ProgrammingAssignment2")
setwd("~/Courses/R Programming")
library(swirl)
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
play()
nxt()
list.files()
?list.files()
?list.files
args(list.files)
args(list.files())
old.dir <- getwd()
dir.create(file.path(old.dir,"testdir"))
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls9)
ls()
list.files()
file.exists("mytest.R")
file.access("mytest.R")
info("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
play()
file.path("mytest3.R")
file.info("mytest.3")
dirname("mytest3.R")
dir("mytest3.R")
?file.path
file.list()
list.files()
getwd
getwd()
getwd() + "/" "mytest3.R"
getwd() + "/" + "mytest3.R"
getwd() + "mytest3.R"
getwd()[1] + "/" + "mytest3.R"
getwd()[1]
normalizePath("mytest3.R")
nxt()
normalizePath("mytest3.R")
file.path("mytest3.R")
?dir.create
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
5 + 7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
(z,555,z)
c(z,555,z)
z*2+100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?:
help(:)
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length(30))
seq(5,10,length=30
)
my_seq<-seq(5,10,length=30_
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vec <- c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect[num_vect<1]
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Edith")
my_name<-c(my_char,"Edith")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep=".")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x <- 1:10
if (x>5){x<-0}
x
x<-5
y<-if(x<3) { NA } else { 10 }
y
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length[iris$Species == "virginica"], na.rm = TRUE)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)[1] - tapply(mtcars$hp, mtcars$cyl, mean)[3]
debug(ls)
ls()
